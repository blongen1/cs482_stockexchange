@using Microsoft.AspNet.Identity
@using stockExchange.Extensions
@model stockExchange.ViewModels.PortfolioViewModel

@{
    ViewBag.Title = "Portfolio";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    .Unchanged {
        background-color: rgba(80, 80, 80, 0.3);
    }
    .Loss {
        background-color: rgba(255, 50, 50, 0.5);
    }
    .Gain {
        background-color: rgba(50, 255, 0, 0.2);
    }
    .table-hover tbody tr:hover td, .table-hover tbody tr:hover th {
        background-color: rgba(255, 255, 255, 0.4);
    }
</style>

<h2>Portfolio for @User.Identity.GetUserName()</h2>

<canvas id="myChart" width="400" height="100"></canvas>

<h3>Total Portfolio Value: $@string.Format("{0:n}", @Model.TotalValue + Convert.ToDouble(User.Identity.GetCash()))</h3>
<h3>Buying Power: $@string.Format("{0:n}", Convert.ToDouble(User.Identity.GetCash()))</h3><br>

@if (!@Model.Portfolio.Any())
{
    <h4>
        You don't currently own any stocks!
        <br>
        <br>
        <a href="/Stocks" class="btn btn-primary btn-lg">Buy Stocks &raquo;</a>
        <br><br>
        <a href="..\Portfolio/Transactions" class="btn btn-primary btn-lg">View Transactions &raquo;</a>
    </h4>
}
else
{
    <h4>
        Currently owned stocks:
    </h4>
    <table id="portfolio" class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Symbol</th>
                <th>Amount</th>
                <th>Price Paid</th>
                <th>Current Price</th>
                <th>Gain/Loss</th>
                <th>Total Value</th>
                <th>Time</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var portfolio in @Model.Portfolio)
            {
                <tr class="@portfolio.TransactionType">
                    <td>@portfolio.Symbol</td>
                    <td>@portfolio.Amount</td>
                    <td>$@portfolio.Price</td>
                    <td>$@Model.CurrentPrice[portfolio.Id]</td>
                    <td>$@string.Format("{0:n}", @Model.GainLoss[portfolio.Id])</td>
                    <td>$@Model.AssetValue[portfolio.Id]</td>
                    <td>@portfolio.Time</td>
                    <td>@Html.ActionLink("Sell", "Details", "Stocks", new { symbol = portfolio.Symbol }, null)</td>
                </tr>
            }
        </tbody>
    </table>
  
    <a href="..\Portfolio/Transactions" class="btn btn-primary btn-lg">View Transactions &raquo;</a>
    <br><br>
    <a href="/Stocks" class="btn btn-primary btn-lg">Buy Stocks &raquo;</a>

}

@section scripts
{
    <script type="text/javascript">

        $(document).ready(function() {
            $("#portfolio").DataTable();
        });


        var ctx = document.getElementById("myChart").getContext('2d');

        var myChart = new Chart(ctx,
            {
                type: 'pie',
                data: {
                    labels: @Html.Raw(Json.Encode(@Model.SymbolList)),
                    datasets: [
                        {
                            label: 'Currency Allocation',
                            data: @Html.Raw(Json.Encode(@Model.AssetValue)),
                            backgroundColor: [
                                'rgba(255, 99, 132, 0.5)',
                                'rgba(54, 162, 235, 0.5)',
                                'rgba(255, 206, 146, 0.5)',
                                'rgba(75, 192, 19, 0.5)',
                                'rgba(153, 102, 255, 0.5)',
                                'rgba(255, 0, 255, 0.5)',
                                'rgba(255, 0, 0, 0.5)',
                                'rgba(51, 255, 255, 0.5)',
                                'rgba(255, 255, 102, 0.5)',
                                'rgba(178, 255, 108, 0.5)'
                            ]
                        }
                    ]
                },

                options: {
                    tooltips: {
                        model: 'label',
                        callbacks: {
                            label: function(tooltipItem, data) {
                                return data.labels[tooltipItem.index] + ': $' + data['datasets'][0]['data'][tooltipItem['index']].toFixed(2);
                            }
                        }
                    },
                    scales: {
                        yAxes: [
                            {
                                ticks: {
                                    beginAtZero: true
                                }
                            }
                        ]
                    }
                }
            });

        setInterval(reloadData, 5000);

        function reloadData() {
            $.ajax({
                url: '@(Url.Action("Index", "Portfolio"))',
                type: "GET",
                complete : function(result) {
                    //$('#portfolio').html(result);
                }
            });

        }

    </script>
}
